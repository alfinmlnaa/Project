# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17UxCLhqVXkV68lZRJ9ECUxb9mR5kd1oL
"""

!pip install librosa
!pip install yt-dlp
!pip install streamlit

import streamlit as st
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from yt_dlp import YoutubeDL
import librosa
import os

# Fungsi untuk download audio dari YouTube menggunakan yt-dlp
def download_audio(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'outtmpl': 'audio.mp3',  # Simpan file audio dengan nama audio.mp3
    }
    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

# Fungsi untuk ekstraksi fitur audio dengan Librosa
def extract_audio_features(file_path):
    y, sr = librosa.load(file_path)
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    mfccs_mean = np.mean(mfccs.T, axis=0)  # Rata-rata dari MFCC
    tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
    return mfccs_mean, tempo

# Dataset simulasi (bisa diganti dengan dataset asli)
def load_data():
    data = {
        'mfcc_mean': [np.random.rand(13) for _ in range(5)],  # Simulasi data MFCC
        'tempo': [120, 150, 90, 130, 140],  # Simulasi data tempo
        'genre': ['Pop', 'Rock', 'Jazz', 'Pop', 'Rock']  # Genre
    }
    df = pd.DataFrame(data)
    return df

# Judul aplikasi
st.title("Prediksi Genre Musik Berdasarkan Link YouTube")

# Input link YouTube
url = st.text_input('Masukkan Link YouTube Musik')

if url:
    # Download audio dari YouTube
    st.write("Mendownload audio dari YouTube...")
    download_audio(url)

    # Mengekstraksi fitur audio menggunakan Librosa
    st.write("Mengekstraksi fitur audio...")
    mfcc_mean, tempo = extract_audio_features('audio.mp3')

    st.write(f"MFCC Rata-rata: {mfcc_mean}")
    st.write(f"Tempo: {tempo}")

    # Memuat dataset simulasi dan menambahkan fitur yang diekstraksi
    data = load_data()
    data.loc[len(data)] = [mfcc_mean, tempo, None]  # Menambahkan fitur baru untuk prediksi

    # Memisahkan fitur dan label
    X = np.array(data['mfcc_mean'].tolist())  # Menggunakan MFCC
    X = np.hstack((X, np.array(data['tempo']).reshape(-1, 1)))  # Menggabungkan MFCC dan tempo
    y = data['genre'].fillna('Unknown')

    # Membagi data untuk pelatihan dan pengujian
    X_train, X_test, y_train, y_test = train_test_split(X[:-1], y[:-1], test_size=0.2, random_state=42)

    # Membuat model RandomForest
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Prediksi genre berdasarkan audio yang baru di-download
    st.write("Melakukan prediksi genre...")
    genre_pred = model.predict([X[-1]])
    st.write(f'Genre yang diprediksi: {genre_pred[0]}')

    # Menghapus file audio setelah selesai digunakan
    os.remove('audio.mp3')